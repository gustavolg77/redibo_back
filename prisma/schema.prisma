generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o mysql/sqlite/etc.
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario                Int                   @id @default(autoincrement())
  nombreCompleto           String
  email                    String                @unique
  contraseña              String?
  fechaNacimiento          DateTime?
  telefono                 String?
  registradoCon            RegistradoCon
  fechaRegistro            DateTime              @default(now())
  verificado               Boolean               @default(false)
  host                     Boolean               @default(false)
  driverBool               Boolean               @default(false)
  fotoPerfil               String?
  codigoVerificacion       String?
  bloqueado                Boolean               @default(false)
  fechaBloqueado           DateTime?
  intentosFallidos         Int                   @default(0)
  direccion                String?
  esAdmin                  Boolean               @default(false)
  edicionesNombre          Int                   @default(0)
  edicionesFecha           Int                   @default(0)
  edicionesTelefono        Int                   @default(0)
  metodoPago               MetodoPago?
  numeroTarjeta            String?
  fechaExpiracion          String?
  titular                  String?
  imagenQr                 String?
  detallesMetodoPago       String?
  notificaciones           Notificacion[]
  terminosCondiciones      TerminosCondiciones[]
  verificaciones           Verificaciones[]
  autos                    Auto[]
  calificacionesRecibidas  CalificacionUsuario[] @relation("UsuarioCalificado")
  calificacionesRealizadas CalificacionUsuario[] @relation("UsuarioCalificador")
  comentariosEscritos      Comentario[]
  driver                   Driver?
  reservas                 Reserva[]
  driversAsignados         UsuarioDriver[]

  @@map("usuarios")
}

model Verificaciones {
  idCodigo   Int              @id @default(autoincrement())
  idUsuario  Int
  codigo     String
  tipo       TipoVerificacion
  creadoEn   DateTime         @default(now())
  expiracion DateTime
  usado      Boolean          @default(false)
  usuario    Usuario          @relation(fields: [idUsuario], references: [idUsuario])
}

model TerminosCondiciones {
  idAceptacion    Int      @id @default(autoincrement())
  idUsuario       Int
  versionTerminos String   @db.VarChar(10)
  fechaAceptacion DateTime
  usuario         Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Driver {
  idDriver         Int             @id @default(autoincrement())
  idUsuario        Int             @unique
  sexo             String
  telefono         String
  licencia         String
  fechaEmision     DateTime
  fechaExpiracion  DateTime
  tipoLicencia     String?
  añosExperiencia Int?
  disponible       Boolean         @default(true)
  anversoUrl       String
  reversoUrl       String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  usuario          Usuario         @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  asignadoA        UsuarioDriver[]

  @@map("drivers")
}

model UsuarioDriver {
  id              Int      @id @default(autoincrement())
  idUsuario       Int
  idDriver        Int
  fechaAsignacion DateTime @default(now())
  driver          Driver   @relation(fields: [idDriver], references: [idDriver], onDelete: Cascade)
  usuario         Usuario  @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

  @@unique([idUsuario, idDriver])
  @@index([idUsuario])
  @@index([idDriver])
  @@map("usuario_drivers")
}

model Notificacion {
  idNotificacion Int                   @id @default(autoincrement())
  idUsuario      Int
  titulo         String                @db.VarChar(100)
  mensaje        String
  idEntidad      String?
  tipoEntidad    String?               @db.VarChar(50)
  leido          Boolean               @default(false)
  leidoEn        DateTime?
  creadoEn       DateTime              @default(now())
  actualizadoEn  DateTime              @updatedAt
  haSidoBorrada  Boolean               @default(false)
  tipo           TipoDeNotificacion
  prioridad      PrioridadNotificacion @default(MEDIA)
  usuario        Usuario               @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

  @@unique([idUsuario, idEntidad, tipo], name: "notificacionUnicaUsuarioEntidad")
  @@index([idUsuario])
  @@index([creadoEn])
  @@index([leido, idUsuario])
  @@index([idUsuario, haSidoBorrada])
}

model Ubicacion {
  idUbicacion Int     @id @default(autoincrement())
  nombre      String  @unique
  descripcion String?
  latitud     Float
  longitud    Float
  esActiva    Boolean @default(true)
  autos       Auto[]

  @@map("ubicaciones")
}

model Auto {
  idAuto                 Int                      @id @default(autoincrement())
  idPropietario          Int
  idUbicacion            Int
  marca                  String
  modelo                 String
  descripcion            String?
  precioRentaDiario      Decimal                  @db.Decimal(10, 2)
  montoGarantia          Decimal                  @db.Decimal(10, 2)
  kilometraje            Int                      @default(0)
  calificacionPromedio   Float?
  totalComentarios       Int                      @default(0)
  tipo                   String
  año                   Int
  placa                  String                   @unique
  soat                   String
  color                  String
  estado                 EstadoAuto               @default(ACTIVO)
  fechaAdquisicion       DateTime                 @default(now())
  asientos               Int                      @default(5)
  capacidadMaletero      Int
  transmision            Transmision
  combustible            Combustible
  diasTotalRenta         Int?
  vecesAlquilado         Int?
  propietario            Usuario                  @relation(fields: [idPropietario], references: [idUsuario])
  ubicacion              Ubicacion                @relation(fields: [idUbicacion], references: [idUbicacion])
  comentarios            Comentario[]
  disponibilidad         Disponibilidad[]
  historialMantenimiento HistorialMantenimiento[]
  imagenes               Imagen[]
  reservas               Reserva[]

  @@index([idUbicacion])
  @@map("autos")
}

model Imagen {
  idImagen        Int    @id @default(autoincrement())
  idAuto          Int
  direccionImagen String
  auto            Auto   @relation(fields: [idAuto], references: [idAuto])

  @@map("imagenes")
}

model Disponibilidad {
  idDisponibilidad Int                    @id @default(autoincrement())
  idAuto           Int
  fechaInicio      DateTime
  fechaFin         DateTime
  motivo           MotivoNoDisponibilidad
  descripcion      String?
  auto             Auto                   @relation(fields: [idAuto], references: [idAuto])

  @@map("disponibilidad")
}

model Reserva {
  idReserva           Int                  @id @default(autoincrement())
  fechaInicio         DateTime
  fechaFin            DateTime
  idAuto              Int
  idCliente           Int
  estado              EstadoReserva        @default(SOLICITADA)
  fechaSolicitud      DateTime             @default(now())
  fechaAprobacion     DateTime?
  fechaLimitePago     DateTime
  montoTotal          Decimal              @db.Decimal(10, 2)
  kilometrajeInicial  Int?
  kilometrajeFinal    Int?
  estaPagada          Boolean              @default(false)
  calificacionUsuario CalificacionUsuario?
  comentario          Comentario?
  garantia            Garantia?
  pagos               Pago[]
  auto                Auto                 @relation(fields: [idAuto], references: [idAuto])
  cliente             Usuario              @relation(fields: [idCliente], references: [idUsuario])

  @@map("reservas")
}

model Pago {
  idPago      Int        @id @default(autoincrement())
  idReserva   Int
  monto       Decimal    @db.Decimal(10, 2)
  fechaPago   DateTime   @default(now())
  metodoPago  MetodoPago
  referencia  String?
  comprobante String?
  tipo        TipoPago   @default(RENTA)
  reserva     Reserva    @relation(fields: [idReserva], references: [idReserva])

  @@map("pagos")
}

model Garantia {
  idGarantia      Int            @id @default(autoincrement())
  idReserva       Int            @unique
  monto           Decimal        @db.Decimal(10, 2)
  fechaDeposito   DateTime       @default(now())
  fechaLiberacion DateTime?
  estado          EstadoGarantia @default(DEPOSITADA)
  comprobante     String?
  reserva         Reserva        @relation(fields: [idReserva], references: [idReserva])

  @@map("garantias")
}

model HistorialMantenimiento {
  idHistorial       Int               @id @default(autoincrement())
  idAuto            Int
  fechaInicio       DateTime          @default(now())
  fechaFin          DateTime?
  descripcion       String
  costo             Decimal?          @db.Decimal(10, 2)
  tipoMantenimiento TipoMantenimiento
  kilometraje       Int
  auto              Auto              @relation(fields: [idAuto], references: [idAuto])

  @@map("historial_mantenimiento")
}

model Comentario {
  idComentario  Int      @id @default(autoincrement())
  idAuto        Int
  idUsuario     Int
  contenido     String?
  calificacion  Int      @db.SmallInt
  fechaCreacion DateTime @default(now())
  idReserva     Int?     @unique
  auto          Auto     @relation(fields: [idAuto], references: [idAuto])
  reserva       Reserva? @relation(fields: [idReserva], references: [idReserva])
  usuario       Usuario  @relation(fields: [idUsuario], references: [idUsuario])

  @@map("comentarios")
}

model CalificacionUsuario {
  idCalificacion   Int                     @id @default(autoincrement())
  idCalificador    Int
  idCalificado     Int
  puntuacion       Int                     @db.SmallInt
  comentario       String?
  fechaCreacion    DateTime                @default(now())
  idReserva        Int                     @unique
  tipoCalificacion TipoCalificacionUsuario
  calificado       Usuario                 @relation("UsuarioCalificado", fields: [idCalificado], references: [idUsuario])
  calificador      Usuario                 @relation("UsuarioCalificador", fields: [idCalificador], references: [idUsuario])
  reserva          Reserva                 @relation(fields: [idReserva], references: [idReserva])

  @@index([idCalificado])
  @@index([idCalificador])
  @@map("calificaciones_usuarios")
}

enum TipoCalificacionUsuario {
  ARRENDADOR
  ARRENDATARIO
}

enum EstadoReserva {
  SOLICITADA
  APROBADA
  RECHAZADA
  CONFIRMADA
  CANCELADA
  EN_CURSO
  FINALIZADA
}

enum EstadoGarantia {
  DEPOSITADA
  LIBERADA
  RETENIDA
}

enum MetodoPago {
  QR
  TARJETA_DEBITO
  EFECTIVO
}

enum Transmision {
  AUTOMATICO
  MANUAL
}

enum Combustible {
  GASOLINA
  DIESEL
  ELECTRICO
  HIBRIDO
}

enum TipoMantenimiento {
  PREVENTIVO
  CORRECTIVO
  REVISION
}

enum EstadoAuto {
  ACTIVO
  INACTIVO
}

enum MotivoNoDisponibilidad {
  MANTENIMIENTO
  REPARACION
  USO_PERSONAL
  OTRO
}

enum TipoPago {
  RENTA
  GARANTIA
}

enum RolUsuario {
  ARRENDADOR
  RENTADOR
  DRIVER
}

enum PrioridadNotificacion {
  BAJA
  MEDIA
  ALTA
}

enum RegistradoCon {
  email
  google
}

enum TipoVerificacion {
  recuperacion
  verificacion
}

enum TipoDeNotificacion {
  RESERVA_SOLICITADA
  RESERVA_APROBADA
  RESERVA_RECHAZADA
  DEPOSITO_CONFIRMADO
  DEPOSITO_RECIBIDO
  RESERVA_CANCELADA
  ALQUILER_FINALIZADO
  RESERVA_MODIFICADA
  VEHICULO_CALIFICADO
}
